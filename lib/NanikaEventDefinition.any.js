// Generated by CoffeeScript 1.8.0

/* (C) 2014 Narazaka : Licensed under The MIT License - http://narazaka.net/license/MIT?2014 */

(function() {
  var NanikaEventDefinition;

  NanikaEventDefinition = this.NanikaEventDefinition;

  if (NanikaEventDefinition == null) {
    NanikaEventDefinition = {};
  }

  NanikaEventDefinition.any = {
    request: function(nanika, args, optionals) {
      var headers, index, name, value, _i, _len, _ref, _ref1;
      headers = null;
      if (args.headers != null) {
        if (args.headers instanceof Array) {
          headers = {};
          _ref = args.headers;
          for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
            value = _ref[index];
            headers["Reference" + index] = value;
          }
        } else if (args.headers instanceof Object) {
          headers = {};
          _ref1 = args.headers;
          for (name in _ref1) {
            value = _ref1[name];
            if (!isNaN(name)) {
              headers["Reference" + name] = value;
            } else {
              headers[name] = value;
            }
          }
        } else {
          throw new Error("event 'any' invalid headers");
        }
      }
      return {
        method: args.method,
        submethod: args.submethod,
        id: args.id,
        headers: headers
      };
    }
  };

  this.NanikaEventDefinition = NanikaEventDefinition;

}).call(this);
